<?php
/**
 * @file
 * Ding full-page calendar widget module.
 */

include_once 'ding_calendar_widget.features.inc';

/**
 * Implements hook_ctools_plugin_directory().
 */
function ding_calendar_widget_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'ctools' && $plugin_type == 'content_types') {
    return 'plugins/' . $plugin_type;
  }
}

/**
 * Run-time rendering of the body of the block with calendar/search field.
 */
function ding_calendar_widget_pane_custom_pane_render($subtype, $conf, $args, $contexts) {
  $block = new stdClass();

  $block->title = '';
  $block->content = array(
    '#markup' => _ding_calendar_widget_content(),
    '#attached' => array(
      'css' => array(drupal_get_path('module', 'ding_calendar_widget') . '/css/ding_calendar_widget.css'),
    ),
  );

  return $block;
}

/**
 * Calendar widget results custom pane renderer.
 */
function ding_calendar_widget_results_pane_custom_pane_render() {

  $block = new stdClass();

  $block->title = '';
  $content = '';
  $content .= '<div id="eventList">' . get_events(date('Y-m-d')) . '</div>';
  $block->content = $content;

  return $block;
}

/**
 * Implements hook_menu().
 */
function ding_calendar_widget_menu() {
  $items = array();

  $items['calendar_widget/%/%'] = array(
    'title' => 'Calendar switch',
    'page callback' => 'ding_calendar_widget_callback',
    'page arguments' => array(1, 2),
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['calendar_widget/events/%'] = array(
    'title' => 'Print events',
    'page callback' => 'ding_calendar_widget_events_callback',
    'page arguments' => array(2),
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * AJAX callback for rendering events calendar.
 */
function ding_calendar_widget_callback($month, $year, $type = 'ajax') {
  if ($type == 'ajax') {
    $date = $year . '-' . sprintf("%02s", $month);
    $output = _ding_calendar_widget_content();
    $content = _ding_calendar_widget_events($date);

    $commands = array();
    $commands[] = ajax_command_replace('#eventsCalendar', $output);
    $commands[] = ajax_command_replace('#eventList', $content);
    $commands[] = ajax_command_replace('#eventsSearchForm', '');

    $page = array('#type' => 'ajax', '#commands' => $commands);
    ajax_deliver($page);
  }
  else {
    $output = t("Please enable Javascript!");
    return $output;
  }
}

/**
 * AJAX callback for rendering events list.
 */
function ding_calendar_widget_events_callback($date, $type = 'ajax') {
  if ($type == 'ajax') {
    $output = _ding_calendar_widget_events($date);
    $commands = array();
    $commands[] = ajax_command_replace('#eventList', $output);
    $page = array('#type' => 'ajax', '#commands' => $commands);
    ajax_deliver($page);
  }
  else {
    $output = t("Please enable Javascript in your browser.");
    return $output;
  }
}

/**
 * Returns event calendar block content.
 */
function _ding_calendar_widget_content() {
  $month = (int) (arg(1) ? arg(1) : date('m'));
  $year = (int) (arg(2) ? arg(2) : date('Y'));

  $search_form = drupal_get_form('draw_input');

  $output = '';
  $output .= '<div id="eventsCalendar">' . draw_controls() . draw_calendar($month, $year) . '</div>';
  $output .= '<div id="eventsSearchForm">' . drupal_render($search_form) . '</div>';
  return $output;
}

/**
 * Returning events list for given date.
 */
function _ding_calendar_widget_events($date = '') {
  if ((int) arg(1) && (int) arg(2)) {
    $date = ($date ? $date : date('Y-m'));
  }
  else {
    $date = (arg(2) ? arg(2) : date('Y-m-d'));
  }
  return '<div id="eventList">' . get_events($date) . '</div>';
}


/**
 * Rendering calendar navigation.
 */
function draw_controls() {
  $month = (int) (arg(1) ? arg(1) : date('m'));
  $year = (int) (arg(2) ? arg(2) : date('Y'));

  if ($month) {
    $date_obj = DateTime::createFromFormat('!m', $month);
    $rendered_month = $date_obj->format('F');
  }
  else {
    $date_obj = DateTime::createFromFormat('!m', date('m'));
    $rendered_month = $date_obj->format('F');
  }

  drupal_add_library('system', 'drupal.ajax');
  /* "next month" control */
  $next_month_link = l(
    t('>>>'),
    'calendar_widget/' . ($month != 12 ? $month + 1 : 1) . '/' . ($month != 12 ? $year : $year + 1) . '/nojs',
    array('attributes' => array('class' => 'use-ajax control next'))
  );

  /* "previous month" control */
  $previous_month_link = l(
    t('<<<'),
    'calendar_widget/' . ($month != 1 ? $month - 1 : 12) . '/' . ($month != 1 ? $year : $year - 1) . '/nojs',
    array('attributes' => array('class' => 'use-ajax control prev'))
  );

  /* bringing the controls together */
  $controls = '<div class="navi-heading">' . $previous_month_link . '<h2>' . $rendered_month . '</h2>' . $next_month_link . ' </div>';

  return $controls;
}

/**
 * Rendering calendar.
 */
function draw_calendar($month, $year) {
  /* draw table */
  $calendar = '<table cellpadding="0" cellspacing="0" id="calendar">';

  /* table headings */
  $headings = array(
    t('Mon'),
    t('Tue'),
    t('Wed'),
    t('Thu'),
    t('Fri'),
    t('Sat'),
    t('Sun'),
  );
  $calendar .= '<tr class="calendar-row"><td class="calendar-day-head">' . implode('</td><td class="calendar-day-head">', $headings) . '</td></tr>';

  /* days and weeks vars now ... */
  $running_day = date('w', mktime(0, 0, 0, $month, 0, $year));
  $days_in_month = date('t', mktime(0, 0, 0, $month, 1, $year));
  $days_in_this_week = 1;
  $day_counter = 0;
  $dates_array = array();

  /* row for week one */
  $calendar .= '<tr class="calendar-row">';

  /* print "blank" days until the first of the current week */
  for ($x = 0; $x < $running_day; $x++) {
    $calendar .= '<td class="calendar-day-np"> </td>';
    $days_in_this_week++;
  }

  /* keep going with days.... */
  for ($list_day = 1; $list_day <= $days_in_month; $list_day++) {
    $form_date = $year . '-' . sprintf("%02s", $month) . '-' . sprintf("%02s", $list_day);
    if ($form_date == date('Y-m-d')) {
      $calendar .= '<td class="calendar-day current-day">';
    }
    else {
      $calendar .= '<td class="calendar-day">';
    }

    /* add in the day number */
    $count = db_query("select count(*) from {node} n inner join {field_data_field_ding_event_date} ed where n.nid=ed.entity_id and date_format(field_ding_event_date_value, '%Y-%m-%d')=:form_date",
      array(
        ':form_date' => $form_date,
      ))->fetchField();

    if ($count > 0) {
      $list_day_printed = l($list_day, 'calendar_widget/events/' . $form_date, array('attributes' => array('class' => 'use-ajax')));
    }
    else {
      $list_day_printed = $list_day;
    }

    $calendar .= '<div class="day-number">' . $list_day_printed . '</div>';

    $calendar .= '</td>';
    if ($running_day == 6) {
      $calendar .= '</tr>';
      if (($day_counter + 1) != $days_in_month) {
        $calendar .= '<tr class="calendar-row">';
      }
      $running_day = -1;
      $days_in_this_week = 0;
    }
    $days_in_this_week++;
    $running_day++;
    $day_counter++;
  }

  /* finish the rest of the days in the week */
  if ($days_in_this_week < 8) {
    for ($x = 1; $x <= (8 - $days_in_this_week); $x++) {
      $calendar .= '<td class="calendar-day-np"> </td>';
    }
  }

  /* final row */
  $calendar .= '</tr>';

  /* end the table */
  $calendar .= '</table>';

  /* all done, return result */
  return $calendar;
}

/**
 * Events search form.
 */
function draw_input($form, &$form_state) {
  $form['calendar-search'] = array(
    '#type' => 'textfield',
    '#title' => 'Search event',
  );

  $form['calendar-search-submit'] = array(
    '#type' => 'submit',
    '#value' => 'Search',
    '#ajax' => array(
      'callback' => 'ding_calendar_widget_search_ajax_callback',
      'wrapper' => 'eventsSearchForm',
    ),
  );

  return $form;
}

/**
 * AJAX callback for search form submit.
 */
function ding_calendar_widget_search_ajax_callback($form, &$form_state) {
  $string = $form['calendar-search']['#value'];

  $new_form_state = array();
  $new_form_state['no_redirect'] = TRUE;
  $new_form_state['input'] = array();
  $new_form = drupal_build_form('draw_input', $new_form_state);

  $commands = array();
  $commands[] = ajax_command_remove($form['#id']);
  $commands[] = ajax_command_replace('#eventsSearchForm', drupal_render($new_form));
  $commands[] = ajax_command_changed('#eventList');
  $commands[] = ajax_command_replace('#eventList', ding_calendar_widget_search_display($string));

  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Getting nid/nids of events and pass them to view for rendering.
 */
function ding_calendar_widget_search_display($string = '') {
  $results = search_data($string, 'node', array('ding_event'));

  $args = array();

  foreach ($results['#results'] as $item) {
    $args[] = $item['node']->nid;
  }

  $view = views_get_view('ding_calendar_widget');
  $view->set_display('ding_widget_event_list');

  if (count($args) > 0) {
    $args = implode('+', $args);

    $view->set_arguments(array($args));
  }

  $view->pre_execute();
  $view->execute();

  $content = $view->render();

  $output = '<div id="eventList">';
  $output .= $content;
  $output .= '</div>';

  return $output;
}

/**
 * Fetching events nids filtered by date/month and passing them to view.
 */
function get_events($date) {
  if (drupal_strlen($date) == 7) {
    $query = db_query("select n.nid from {node} n inner join {field_data_field_ding_event_date} ed where n.nid=ed.entity_id and date_format(field_ding_event_date_value, '%Y-%m')=:date and date_format(field_ding_event_date_value, '%Y-%m-%d') >= CURRENT_DATE ",
      array(
        ':date' => $date,
      )
    );
  }
  else {
    $query = db_query("select n.nid from {node} n inner join {field_data_field_ding_event_date} ed where n.nid=ed.entity_id and date_format(field_ding_event_date_value, '%Y-%m-%d')=:date",
      array(
        ':date' => $date,
      )
    );
  }

  $items = $query->fetchAll();

  $view = views_get_view('ding_calendar_widget');
  $view->set_display('ding_widget_event_list');

  if (count($items) > 0) {
    $results = array();
    foreach ($items as $item) {
      $results[] = $item->nid;
    }
    $results = implode('+', $results);
    $view->set_arguments(array($results));
  }

  $view->pre_execute();
  $view->execute();
  $content = $view->render();

  return $content;
}
