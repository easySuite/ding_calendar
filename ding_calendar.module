<?php
/**
 * @file
 * Ding full-page calendar module.
 */

include_once 'ding_calendar.features.inc';

/**
 * Implements hook_ctools_plugin_directory().
 */
function ding_calendar_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'ctools' && $plugin_type == 'content_types') {
    return 'plugins/' . $plugin_type;
  }
}

/**
 * Implements hook_menu().
 */
function ding_calendar_menu() {
  $items = array();

  $items['calendar/%/%'] = array(
    'title' => 'Calendar switch',
    'page callback' => 'ding_calendar_callback',
    'page arguments' => array(1, 2),
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['calendar/events/%'] = array(
    'title' => 'Print events',
    'page callback' => 'ding_calendar_events_callback',
    'page arguments' => array(2),
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function ding_calendar_theme($existing, $type, $theme, $path) {
  return array(
    'ding_calendar' => array(
      'variables' => array(
        'year' => NULL,
        'month' => NULL,
      ),
    ),
    'ding_calendar_controls' => array(
      'variables' => array(
        'year' => NULL,
        'month' => NULL,
      ),
    ),
  );
}

/**
 * AJAX callback for rendering events calendar.
 */
function ding_calendar_callback($year, $month, $type = 'ajax') {
  if ($type == 'ajax') {
    $date = $year . '-' . str_pad($month, 2, '0', STR_PAD_LEFT);
    $output = _ding_calendar_content($year, $month);
    $content = _ding_calendar_events($date);

    $commands = array();
    $commands[] = ajax_command_replace('#ding-calendar-wrapper', $output);
    $commands[] = ajax_command_replace('#ding-calendar-events', $content);

    $page = array('#type' => 'ajax', '#commands' => $commands);
    ajax_deliver($page);
  }
  else {
    $output = t("Please enable Javascript!");
    return $output;
  }
}

/**
 * AJAX callback for rendering events list.
 */
function ding_calendar_events_callback($date, $type = 'ajax') {
  if ($type == 'ajax') {
    $output = _ding_calendar_events($date);
    $commands = array();
    $commands[] = ajax_command_replace('#ding-calendar-events', $output);
    $page = array('#type' => 'ajax', '#commands' => $commands);
    ajax_deliver($page);
  }
  else {
    $output = t("Please enable Javascript in your browser.");
    return $output;
  }
}

/**
 * Returns event calendar block content.
 */
function _ding_calendar_content($year, $month) {
  $search_form = drupal_get_form('ding_calendar_draw_input');
  $calendar = theme('ding_calendar',
    array(
      'month' => $month,
      'year' => $year,
    )
  );

  $controls = theme('ding_calendar_controls',
    array(
      'month' => $month,
      'year' => $year,
    )
  );

  $output = '<div id="ding-calendar-wrapper">';
  $output .= '<div id="ding-calendar-container">' . $controls . $calendar . '</div>';
  $output .= '<div id="ding-calendar-search-wrapper">';
  $output .= drupal_render($search_form);
  $output .= '</div>';
  $output .= '</div>';
  return $output;
}

/**
 * Returning events list for given date.
 */
function _ding_calendar_events($date) {
  return '<div id="ding-calendar-events">' .
  ding_calendar_get_events($date) .
  '</div>';
}


/**
 * Rendering calendar navigation.
 */
function theme_ding_calendar_controls(&$variables) {
  $year = $variables['year'];
  $month = $variables['month'];

  drupal_add_library('system', 'drupal.ajax');

  $date = DateTime::createFromFormat('Y-m-d', "{$year}-{$month}-01");
  $month_name = t(date_format($date, 'F'));

  $next_month_link = _get_next_month_link($date);
  $prev_month_link = _get_prev_month_link($year, $month);

  $output = '<div class="navi-heading">';
  $output .= $prev_month_link;
  $output .= '<h2>' . $month_name . '</h2>';
  $output .= $next_month_link;
  $output .= '</div>';

  return $output;
}

/**
 * Generating next month link.
 *
 * @param object $date
 *   Current calendar DateTime object.
 *
 * @return string
 *   Link markup.
 */
function _get_next_month_link($date) {
  // Problem mentioned in http://php.net/manual/en/datetime.add.php:Example #3.
  if ($date->format('d-m') == '31-01') {
    $next = $date->modify('last day of next month');
  }
  else {
    $next = $date->add(new DateInterval('P1M'));
  }

  $next_month_link = array(
    '#theme' => 'link',
    '#title' => '',
    '#path' => 'calendar/' . $next->format('Y') . '/' . $next->format('m') . '/nojs',
    '#options' => array(
      'attributes' => array(
        'class' => 'use-ajax control next',
      ),
    ),
  );

  return drupal_render($next_month_link);
}

/**
 * Generate previous month link.
 *
 * @param int $year
 *   Passed in year.
 * @param int $month
 *   Passed in month.
 *
 * @return string
 *   Link markup.
 */
function _get_prev_month_link($year, $month) {
  $date = DateTime::createFromFormat('Y-m-d', "{$year}-{$month}-01");
  $interval = new DateInterval('P1M');
  $interval->invert = 1;
  $prev = $date->add($interval);

  $prev_month_link = array(
    '#theme' => 'link',
    '#title' => '',
    '#path' => 'calendar/' . $prev->format('Y') . '/' . $prev->format('m') . '/nojs',
    '#options' => array(
      'attributes' => array(
        'class' => 'use-ajax control prev',
      ),
    ),
  );

  return drupal_render($prev_month_link);
}

/**
 * Custom theme function, for rendering calendar.
 */
function theme_ding_calendar(&$variables) {
  $year = $variables['year'];
  $month = $variables['month'];

  $header = array(
    t('Mon'),
    t('Tue'),
    t('Wed'),
    t('Thu'),
    t('Fri'),
    t('Sat'),
    t('Sun'),
  );

  $rows = array();
  $days = date('t', mktime(0, 0, 0, $month, 1, $year));
  for ($i = 1; $i <= $days; $i++) {
    $timestamp = mktime(0, 0, 0, $month, $i, $year);
    $week_number = date('W', $timestamp);
    _ding_calendar_generate_row($timestamp, $i, $rows[$week_number]);
  }
  foreach ($rows as &$row) {
    foreach ($row['data'] as &$day) {
      if (!is_array($day)) {
        $day = array(
          'data' => '',
          'class' => array('calendar-day-np'),
        );
      }
    }
  }

  return theme('table', array(
    'rows' => $rows,
    'header' => $header,
    'attributes' => array('id' => 'calendar'),
  ));
}

/**
 * Helper function for generation row of calendar.
 *
 * @param string $timestamp
 * @param string $day
 * @param string $current
 *
 * @return string
 */
function _ding_calendar_generate_row($timestamp, $day, &$current) {
  $week_day = date('N', $timestamp);
  $current_day = date('d-m', $timestamp);

  if (empty($current)) {
    $current = array(
      'data' => array_flip(range(1, 7)),
      'class' => array('calendar-row'),
    );
  }

  $current['data'][$week_day] = array(
    'data' => _ding_calendar_generate_cell($timestamp, $day),
    'class' => array('calendar-day'),
  );

  if (date('d-m') == $current_day) {
    $current['data'][$week_day]['class'][] = 'current-day';
  }

  $events_count = db_query("select count(*) from {node} n inner join {field_data_field_ding_event_date} ed where n.nid=ed.entity_id and DATE_FORMAT(CONVERT_TZ(field_ding_event_date_value, '+00:00', :tz), '%Y-%m-%d') <= :form_date and DATE_FORMAT(CONVERT_TZ(field_ding_event_date_value2, '+00:00', :tz), '%Y-%m-%d') >= :form_date",
    array(
      ':form_date' => date('Y-m-d', $timestamp),
      ':tz' => date('P'),
    ))->fetchField();

  if (!empty($events_count)) {
    $current['data'][$week_day]['class'][] = 'has-events';
  }
}

/**
 * Helper function for generation cell of calendar.
 *
 * @param string $timestamp
 * @param string $day
 *
 * @return string
 */
function _ding_calendar_generate_cell($timestamp, $day) {
  $cell = $day;
  $date = date('Y-m-d', $timestamp);
  $events_count = db_query("select count(*) from {node} n inner join {field_data_field_ding_event_date} ed where n.nid=ed.entity_id and DATE_FORMAT(CONVERT_TZ(field_ding_event_date_value, '+00:00', :tz), '%Y-%m-%d') <= :form_date and DATE_FORMAT(CONVERT_TZ(field_ding_event_date_value2, '+00:00', :tz), '%Y-%m-%d') >= :form_date",
    array(
      ':form_date' => $date,
      ':tz' => date('P'),
    ))->fetchField();

  if ($events_count) {
    $cell = l($day, "calendar/events/{$date}",
      array(
        'attributes' => array('class' => 'use-ajax'),
      )
    );
  }

  return '<div class="day-number">' . $cell . '</div>';
}

/**
 * Events search form.
 */
function ding_calendar_draw_input($form, &$form_state) {
  $form['#id'] = array('ding-calendar-draw-input');

  $form['calendar_search'] = array(
    '#type' => 'textfield',
    '#title' => t('Search event'),
    '#attributes' => array(
      'placeholder' => t('Search event'),
      'autocomplete' => 'off',
    ),
  );

  $form['calendar_search_submit'] = array(
    '#type' => 'submit',
    '#value' => t('Search'),
    '#ajax' => array(
      'callback' => 'ding_calendar_search_ajax_callback',
      'wrapper' => 'ding-calendar-search-wrapper',
    ),
  );

  return $form;
}

/**
 * AJAX callback for search form submit.
 */
function ding_calendar_search_ajax_callback($form, &$form_state) {
  $string = $form['calendar_search']['#value'];

  $form_state['no_redirect'] = TRUE;
  $new_form = drupal_build_form('ding_calendar_draw_input', $form_state);

  $commands = array();
  $commands[] = ajax_command_replace('#ding-calendar-search-wrapper', drupal_render($new_form));
  $commands[] = ajax_command_changed('#ding-calendar-events');
  $commands[] = ajax_command_replace('#ding-calendar-events', ding_calendar_search_display($string));

  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Getting nid/nids of events and pass them to view for rendering.
 */
function ding_calendar_search_display($string = '') {
  $results = search_data($string, 'node', array('ding_event'));

  $args = array();

  foreach ($results['#results'] as $item) {
    $args[] = $item['node']->nid;
  }

  $view = views_get_view('ding_calendar');
  $view->set_display('ding_event_list');

  if (count($args) > 0) {
    $args = implode('+', $args);

    $view->set_arguments(array($args));
  }

  $view->pre_execute();
  $view->execute();

  $content = $view->render();

  $output = '<div id="ding-calendar-events">';
  $output .= $content;
  $output .= '</div>';

  return $output;
}

/**
 * Fetching events nids filtered by date/month and passing them to view.
 */
function ding_calendar_get_events($date) {
  $result = db_query("select n.nid from {node} n inner join {field_data_field_ding_event_date} ed where n.nid=ed.entity_id and DATE_FORMAT(CONVERT_TZ(field_ding_event_date_value, '+00:00', :tz), '%Y-%m-%d') <= :date and DATE_FORMAT(CONVERT_TZ(field_ding_event_date_value2, '+00:00', :tz), '%Y-%m-%d') >= :date order by ed.field_ding_event_date_value asc",
    array(
      ':date' => $date,
      ':tz' => date('P'),
    ))->fetchCol();

  $view = views_get_view('ding_calendar');
  $view->set_display('ding_event_list');

  if (count($result) > 0) {
    $result = implode('+', $result);
  }
  $view->set_arguments(array($result));

  $view->pre_execute();
  $view->execute();
  $content = $view->render();

  return $content;
}

/**
 * Implements hook_theme_registry_alter().
 */
function ding_calendar_theme_registry_alter(&$theme_registry) {
  $module_path = drupal_get_path('module', 'ding_calendar');
  $template_file_objects = drupal_find_theme_templates($theme_registry, '.tpl.php', $module_path);

  foreach ($template_file_objects as $key => $template_file_object) {
    if (!isset($theme_registry[$key]['theme path']) || !preg_match('#/themes/#', $theme_registry[$key]['theme path'])) {
      $theme_registry[$key]['theme path'] = $module_path;
      $theme_registry[$key] = array_merge($theme_registry[$key], $template_file_object);
      $theme_registry[$key]['type'] = 'module';
    }
  }
}

/**
 * Implements hook_views_pre_render().
 */
function ding_calendar_views_pre_render(&$view) {
  if ($view->name == 'ding_calendar' || $view->name == 'ding_event') {
    foreach ($view->result as $item) {
      $price_field = $item->field_field_ding_event_price[0]['raw']['value'];

      if (empty($price_field)) {
        $item->field_field_ding_event_price[0]['rendered']['#markup'] = t('Free');
      }
    }
  }
}
